
<%- include('partials/header') -%>
<section class="slider-area slider-area2">
    <div class="slider-active">
        <!-- Single Slider -->
        <div class="single-slider slider-height2">
            <div class="container">
                <div class="row">
                    <div class="col-xl-8 col-lg-11 col-md-12">
                        <div class="hero__caption hero__caption2">
                            <h1 data-animation="bounceIn" data-delay="0.2s">Our courses</h1>
                            <!-- breadcrumb Start-->
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb">
                                    <li class="breadcrumb-item"><a href="index">Home</a></li>
                                    <li class="breadcrumb-item"><a href="#">C++</a></li> 
                                </ol>
                            </nav>
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb">
                                    <li class="breadcrumb-item" id="clk"><a href="#intro">Introduction</a></li>
                                    <li class="breadcrumb-item"><a href="#itj">C++ Characteristics</a></li> 
                                    <li class="breadcrumb-item"> <a href="#mf">C vs C++</a></li> 
                                    <li class="breadcrumb-item"> <a href="#Exm">Example</a></li> 
                                </ol>
                            </nav>
                            <!-- breadcrumb End -->
                        </div>
                    </div>
                </div>
            </div>          
        </div>
    </div>
</section>
    <div class="javamainbody">
        
        <div class="java">
            <center><img src="img/c.png" alt=""></center>
            <div class="jump" id="intro">
                <h2>
                    C++ Introduction
                    <hr class="hrclass">
                </h2>
                <ul>
                    <li>Procedure Oriented Programming is one of the programming methods where the main focus is on <i><strong> functions </strong> </i> or <i><strong>  procedures</i> </strong>  required for computation,instead of data.
                    </li>
                    <li>The program is divided into functions, and the task is done sequentially. These functions share the global data or variables, and there is an exchange of data among 
                        those functions.
                        <br>
                <strong>        Language:</strong> Pascal,FORTRAN. </li>
                    <div class="img text-center">
                        <img src="img/popimage.png" alt="">
                    </div>
                    
                </ul>
            </div>

            <div class="jump" id="itj">
                <h1>Characteristics
                    <hr class="hrclass">
                </h1>

                <div>
                    <p> Problems are divided into small parts(functions).</p>

                    <p> Sharing of global data between functions. </p>

                    <p> Problems are solved systematically(algorithm). </p>

                    <p>
                        sharing of data between functions.  
                    </p>
<p>  Emphasis on data rather than functions.</p>
<p>    functions and its data tied together in the data structure.
</p>
<p> Data are hidden and cannot accessed by external functions.</p>
                </div>
            </div>



            <div class="jump" id="jt">
                <h3>Object Oriented Programming
                    <hr class="hrclass">
                </h3>

                <ol class="ol">

                    <li>
                        OOps is one of the <strong>High Level Programming Language</strong> in which a program is divided into objects.
                    </li>
                    <li>
                        OOps is an object-oriented programming technique that combines data and instructions for processing that data into an object that can be used within the program. 
                    </li>
                    <li>
                 An object is an <strong> instance of  a class </strong> and has state and behavior.The state is the attribute,or data ,whereas Behavior is called a
                 <strong> method</strong>.
                    </li>
                </ol>
            </div>
            <div class="img text-center"><img src="img/communication-oop.jpg" alt=""></div>
            <div class="jump" id="mf">
                <h3>C vs C++
                    <hr class="hrclass">
                </h3>
                <table  class="table1" border="1">
                
                    <thead>
                        <tr>
                            <th id="first">C</th>
                            <th id="second">C++ </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
            It is Procedural language.
                            </td>
                            <td>
                                it is Object Oriented Programming language.
                            </td>
                            <tr>
                            <td>
                                It is <strong> Compiler</strong> based language.
                            </td>
                            <td>
                                It is also <strong> Compiler</strong> based language.
                            </td>
                        </tr>
                    <tr>
                            <td>
                            It follows <strong> Top Down Approach</strong>
                            </td>
                            <td>
                                C++ follows <strong>Bottom-Up Approach</strong>.
                            </td>
                        </tr>
                    <tr>
                    <td>
            Data Security is very less.
                            </td>
                            <td>
                                Data Security is more in C++
                            </td>
                        </tr>
                    <tr>
                            <td>
                              Namespaces are not availabels in C.
                            </td>
                            <td>
                                Namespaces are  availabels in C.
                            </td>
                        </tr>
                        <tr>
                            <td>
                                C program divided into modules.
                            </td>
                            <td>
                                C++ program divided into classes and functions.
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Exception Handling is not supported.
                            </td>
                            <td>
                                Exception Handling is supported.
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Function Overloading is not possible.
                            </td>
                            <td>
                                Function Overloading is possible.
                            </td>
                        </tr>
                        <tr>
                            <td>
                                File extension in <strong> .c</strong>.
                            </td>
                            <td>
                                File extension in <strong>.cpp</strong>.
                            </td>
                        </tr>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="jump" id="Exm">
                <h2>Example
                    <hr class="hrclass">
                </h2>

                <div class="example">
<pre>
 #include&lt;iostream&gt;
 using namespace std;

 int main() {
     // prints the string enclosed in double quotes
     cout << "This is C++ Programming";
     return 0;
 }
</pre>
                    <h3>Output</h3>
                    <p class="out">This is C++ Programming</p>

                    <h3>Explanation:
                        <hr class="hrclass">
                    </h3>
                    <ol class="ol">

                        <li>
                            <span>Comments:</span> Comments are used for explaining code and are used in a similar
                            manner in
                             C or C++. Compilers ignore the comment entries and do not execute them. Comments can
                            be
                            of a
                            single line or multiple lines.
                            <pre>
    Single line Comments:
    Syntax:
    
    // Single line comment
    Multi-line comments:
    Syntax:
    
    /* Multi line comments*/
    </pre>
                        </li>
                        <li><span>iostream:</span>
                            We first include the<strong> iostream</strong> header file that allows us to display output.
                            </li>
                            <li> <span>cout:</span> The <strong>cout</strong> object is defined inside the <strong> std</strong> namespace. To use the <strong> std </strong>namespace, we used the <strong>
                            
                            using namespace std;</strong> statement.
                            </li>
                            <li><span>main()</span>
                            Every C++ program starts with the<strong> main()</strong> function. The code execution begins from the start of the <strong>main()</strong> function.
                            
                            </li>
                            <li>
                            <strong>cout</strong> is an object that prints the string inside quotation marks<strong> " ".</strong> It is followed by the <strong> << </strong>operator.</li>
                            </li>
                            <li>
                            <strong><span>return:</span>
                                return 0;</strong> is the "exit status" of the main() function. The program ends with this statement, however, this statement is not mandatory.
                            </li>
                    </ol>

                   
                </div>
            </div>
            <div class="jump"  id="cobj">
                <h1>  Class &  Object
                    <hr class="hrclass">
                </h1>
                <ul type="disk">
                  
                    <h2> <strong>Class:</strong></h2>
                        <li>
                         A class in C++ is the building block that leads to Object-Oriented programming. 
                       
                       </li>
                         <li> 
                         It is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. 
                     </li>
                      <li>
                         A C++ class is like a blueprint for an object. 
                     </li>
                        <h3> For Example:</h3>
                         
                         <li> Consider the Class of Cars. There may be many cars with different names and brand but all of them will share some common
                          properties like all of them will have 4 wheels, Speed Limit, Mileage range etc. So here, Car is the class 
                          and wheels, speed limits, mileage are their properties.
                     </li>
                         <li>A Class is a user defined data-type which has data members and member functions.
                     </li>
                         <li>Data members are the data variables and member functions are the functions used to manipulate these variables and together these data members and 
                         member functions defines the properties and behavior of the objects in a Class.
                      </li>
                        <li> In the above example of class Car, the data member will be speed limit, mileage etc and member functions can be apply brakes, increase speed etc.
                         </li>
                         </ul>
                         <h2> Object</h2>
                         <ul>
                            <li> An Object is an instance of a Class. When a class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated.</li>
                         </ul>
                         <h3>
                         Defining Class and Declaring Objects
                     </h3>
<ul>
    <li>                         A class is defined in C++ using keyword <strong>class</strong> followed by the name of class. The body of class is defined inside the <strong>curly brackets</strong> and terminated by <strong>semicolon </strong> the end.
    </li>
</ul>                       
            </div>
            <div id="opetr">
                <h1>Operator</h1>
                <hr class="hrclass">
               
                <p>
                    An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. <br>
                    C++ is rich in built-in operators and provide the following types of operators −
                <ul type="square">
                    <li>Arithmetic Operators</li>
                <li>Relational Operators</li>
                <li>Logical Operators</li>
                <li>
                    Bitwise Operators</li>
                <li>Assignment Operators</li>
                </ul>
                </p>
                <h1>Arithmetic Operators</h1>
                <p>
                    There are following arithmetic operators supported by C++ language--
                </p>
                <table border="3">
                    <thead>
                        <tr>
                            <th>operator</th>
                            <th>Description</th>
                            <th>Example</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                +
                            </td>
                            <td>Adds two operands</td>
                            <td>A+B will give 30</td>
                        </tr>
                        <tr>
                            <td>
                                -
                            </td>
                            <td>
                                Subtracts second operand from the first
                            </td>
                            <td>A-B will give -10</td>
                        </tr>
                        <tr>
                            <td>*</td>
                            <td>Multipiles both operands</td>
                        <td>A*B will give 200</td>
                        </tr>
                        <tr>
                            <td>/</td>
                            <td>
                                Divides numerator by de-numerator
                            </td>
                            <td>
                                B/A will give 2
                            </td>
                
                        </tr>
                <tr>
                    <td>
                        %
                    </td>
                    <td>
                        Modulus Operator and remainder of after an integer division
                    </td>
                    <td>
                        B%A will give 0
                    </td>
                </tr>
                <tr>
                    <td>++</td>
                    <td>Increment operator increases value by one</td>
                    <td>A++ will give 11</td>
                </tr>
                <tr>
                    <td>
                        --
                    </td>
                    <td>Decrement operator decreases integer value by one</td>
                    <td>A-- will give 9</td>
                </tr>
                    </tbody>
                </table>
                    </div>
                <div id="oprtor1">
                <h1>
                    Relational Operators
                </h1>
                <p>
                    There are following Relation Operators supported by C++ language--
                    <br>
                    Assume variable A holds 10 and variable B holds  20 then -
                </p>
                <table border="4">
                    <thead>
                        <tr>
                            <th>operator</th>
                            <th>Description</th>
                            <th>Example</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                ==
                            </td>
                            <td> Checks if the values of two operands are equal or not ,if yes then condition becomes true</td>
                            <td>A==B is not true</td>
                        </tr>
                        <tr>
                            <td>
                                !=
                            </td>
                            <td>
                                Checks if the values of two operands are equal or not ,if values are not equal then condition true. 
                            </td>
                            <td>(A!=B) is true</td>
                        </tr>
                        <tr>
                            <td>></td>
                            <td>Checks if the values of left operand is greater than the value of right operand,if yes then condition becomes true</td>
                        <td>(A>B) is not true</td>
                        </tr>
                        <tr>
                            <td>&lt;</td>
                            <td>
                                Checks if the value of left operanb is  less than the value of right operand,if yes then condition becomes true
                            </td>
                            <td>
                                (A&lt;B) is true
                            </td>
                
                        </tr>
                <tr>
                    <td>
                        >=
                    </td>
                    <td>
                        Checks if the value of left operand is greater than or equal to the value of right operand ,if yes then condition becomes true.
                    </td>
                    <td>
                        (A>=B)
                    </td>
                </tr> is not true
                <tr>
                    <td>&lt;=</td>
                    <td>Checks if the value of left operand is less than or equal to the value of right operand ,if yes than condition becomes true.</td>
                    <td> (A&lt;=B) is true</td>
                </tr>
                    </tbody>
                </table>
                </div>
                <div id="oprtor2">
                    <h1> Logical Operators
                    </h1>
                    <p>
                        There are following Relation Operators supported by C++ language--
                        <br>
                        Assume variable A holds 1 and variable B holds  0 then -
                    </p>
                    <table border="4">
                        <thead>
                            <tr>
                                <th>operator</th>
                                <th>Description</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    &&
                                </td>
                                <td> Called Logical AND operator . if both the operands are non zero ,then condition becomes true . </td>
                                <td>A&&B is False</td>
                            </tr>
                            <tr>
                                <td>
                                    ||
                                </td>
                                <td>
                                    Called Logical OR operator . if any  the  two operands is non zero ,then condition becomes true .
                                </td>
                                <td>(A||B) is true</td>
                            </tr>
                            <tr>
                                <td>!</td>
                                <td>Called Logical NOT Operator.Use to reverses the logical state of its operand if a condition is true ,then logical NOT operator will make false</td>
                            <td>!(A&&B) is true</td>
                            </tr>
                
                </tbody>    
                    </table>
                    </div>
                <div id ="oprtor3">
                <h1>Bitwise Operator</h1>
                
                    <table border="4">
                    <thead>
                        <tr>
                            <th>
                                p
                            </th>
                            <th>q</th>
                            <th>p&q</th>
                            <th>p|q</th>
                            <th>p^q</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                        </tr>
                        <tr>
                            <td>0</td>
                            <td>1</td>
                             <td>0</td>        
                            <td>1</td>
                            <td>1</td>
                        </tr>
                        <tr>
                            <td>1</td>
                            <td>1</td>
                            <td>1</td>
                            <td>1</td>
                            <td>0</td>
                        </tr>
                        <tr>
                            <td>1</td>
                            <td>0</td>
                            <td>0</td>
                            <td>1</td>
                            <td>1</td>
                        </tr>
                        
                    </tbody>
                </table>
                <p>Assume if A=60; B=13; now in binary format they will be as follows-
                    <br>A=00111100;
                <br>
                    B=00001101;
                <p>---------------</p>
                A&&B=0000 1100
                <br>
                A|B=0011 1101
                <br>
                A^B=0011 0001
                <br>
                A~=1100 0011
                <br>
                </p>
                </div>
                <div id="oprtor5">
                    <h1>Assignment Operator</h1>
                <P>
                    There are following Assignment Operators supported by C++ language--
                </P>
                <table border="4">
                    <thead>
                        <tr>
                            <th>operator</th>
                            <th>Description</th>
                            <th>Example</th>
                                    </tr>
                
                    </thead>
                <tbody>
                    <tr>
                        <td>=</td>
                        <td>Simple Assignment operator,Assigns values from right side operand</td>
                        <td>C=A+B will assign value of A+B into C.</td>
                    </tr>
                    <tr>
                        <td>+=</td>
                    <td>
                        Add AND assignmentoperator,it adds right operand to the left operand and assign the result to left operand.
                    </td> 
                <td>
                    C+=A is equivalent to C=C+A
                </td>   </tr>
                <tr>
                    <td>-=</td>
                    <td>Subtract AND assignment operator,it subtracts right operand from the left operand and assign the result to left operand</td>
                     <td>C-=A is equivalent to C=C-A.</td>     
                </tr>
                <tr>
                    <td>*=</td>
                    <td>Multiply AND assignment operator, it multiplies right operand with the left operand and assign the result to left operand</td>
                
                <td>C*=A is equivalent to C=C+A.</td>
                </tr>
                <tr>
                    <td>
                        /=
                    </td>
                    <td>Divide AND assignment operator,it divide left  operand with the right operand and assign the result to left operand. </td>
                    <td>C/=A is equivalent to C=C/A</td>
                </tr>
                <tr>
                    <td>%=</td>
                <td>	Modulus AND assignment operator, It takes modulus using two operands and assign the result to left operand.
                </td>	
                <td>C%= A is equivalent to C=C%A</td>
                
                </tr>	
                <tr>
                    <td>&lt;&lt;</td>
                  <td>Left shift AND assignment operator.</td>  
                    <td>	C &lt;&lt;= 2 is same as C = C &lt;&lt;2</td>
                </tr>
                <tr>
                    <td>
                        >>=	
                    </td>
                    <td>Right shift AND assignment operator.	</td>
                    <td>C >>= 2 is same as C = C >> 2</td>
                </tr>
                <tr>
                    <td>&=</td>
                    <td>Bitwise AND assignment operator.</td>
                    <td>	C &= 2 is same as C = C & 2</td>
                </tr>
                <tr>
                    <td>
                        ^=</td>
                    <td>Bitwise exclusive OR and assignment operator.</td>
                    <td>
                        C ^= 2 is same as C = C ^ 2</td>
                </tr>
                <tr>
                    <td>|=</td>
                    <td>Bitwise inclusive OR and assignment operator.</td>
                    <td>C |= 2 is same as C = C | 2</td>
                </tr>
                </tbody>
                </table>
        </div>

    </div>
    <script>
        const bar = document.getElementById('bar');
        const nav = document.getElementById('navbar');
        const close = document.getElementById('close');
        if (bar) {
            bar.addEventListener('click', () => {
                nav.classList.add('active');
            })
        }
        if (close) {
            close.addEventListener('click', () => {
                nav.classList.remove('active');
            })
        }
    </script>
<%- include('partials/footer') -%>